import re

def extract_boot_time(dump_file):
    """
    Extracts boot-related timestamps from a dumpstate file.
    Returns the boot time duration in seconds.
    """
    boot_events = {
        "kernel": None,
        "fsck": None,
        "zygote": None,
        "boot_completed": None
    }

    # Regex patterns for important boot events
    patterns = {
        "kernel": r"\s*(\d+\.\d+) Booting Linux Kernel",
        "fsck": r"\s*(\d+\.\d+) fsck completed",
        "zygote": r"\s*(\d+\.\d+) Starting Zygote",
        "boot_completed": r"\s*(\d+\.\d+) ACTION_BOOT_COMPLETED"
    }

    with open(dump_file, "r", encoding="utf-8", errors="ignore") as file:
        for line in file:
            for event, pattern in patterns.items():
                match = re.search(pattern, line)
                if match and boot_events[event] is None:
                    boot_events[event] = float(match.group(1))

    # Calculate total boot time
    if boot_events["kernel"] is not None and boot_events["boot_completed"] is not None:
        boot_time = boot_events["boot_completed"] - boot_events["kernel"]
    else:
        boot_time = None  # Boot time could not be determined

    return boot_events, boot_time

# File paths for DUT and REF logs
dut_log = "dut_dumpstate.txt"  # Change this to your DUT dumpstate file
ref_log = "ref_dumpstate.txt"  # Change this to your REF dumpstate file

# Extract boot times
dut_events, dut_time = extract_boot_time(dut_log)
ref_events, ref_time = extract_boot_time(ref_log)

# Print results
print("\n=== Boot Time Comparison ===")
if dut_time and ref_time:
    print(f"DUT Boot Time: {dut_time:.2f} sec")
    print(f"REF Boot Time: {
